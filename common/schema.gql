# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Author {
  firstName: String!
  id: String!
  lastName: String!
  posts(
    """Specify to filter the records returned."""
    filter: PostFilter = {}

    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to sort results."""
    sorting: [PostSort!] = []
  ): AuthorPostsConnection!
}

type AuthorConnection {
  """Array of edges."""
  edges: [AuthorEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

type AuthorCountAggregate {
  firstName: Int
  id: Int
  lastName: Int
}

input AuthorDeleteFilter {
  and: [AuthorDeleteFilter!]
  firstName: StringFieldComparison
  id: StringFieldComparison
  lastName: StringFieldComparison
  or: [AuthorDeleteFilter!]
}

type AuthorDeleteResponse {
  firstName: String
  id: String
  lastName: String
}

type AuthorEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Author"""
  node: Author!
}

input AuthorFilter {
  and: [AuthorFilter!]
  firstName: StringFieldComparison
  id: StringFieldComparison
  lastName: StringFieldComparison
  or: [AuthorFilter!]
  posts: AuthorFilterPostFilter
}

input AuthorFilterPostFilter {
  and: [AuthorFilterPostFilter!]
  authorId: StringFieldComparison
  content: StringFieldComparison
  id: StringFieldComparison
  or: [AuthorFilterPostFilter!]
  status: StringFieldComparison
  title: StringFieldComparison
}

type AuthorMaxAggregate {
  firstName: String
  id: String
  lastName: String
}

type AuthorMinAggregate {
  firstName: String
  id: String
  lastName: String
}

type AuthorPostsConnection {
  """Array of edges."""
  edges: [PostEdge!]!

  """Paging information"""
  pageInfo: PageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

input AuthorSort {
  direction: SortDirection!
  field: AuthorSortFields!
  nulls: SortNulls
}

enum AuthorSortFields {
  firstName
  id
  lastName
}

input AuthorUpdateFilter {
  and: [AuthorUpdateFilter!]
  firstName: StringFieldComparison
  id: StringFieldComparison
  lastName: StringFieldComparison
  or: [AuthorUpdateFilter!]
}

type Comment {
  content: String!
  createdAt: DateTime!
  id: String!
  post: Post!
  postId: String!
  title: String!
  updatedAt: DateTime!
}

type CommentConnection {
  """Array of edges."""
  edges: [CommentEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

type CommentCountAggregate {
  content: Int
  id: Int
  postId: Int
  title: Int
}

input CommentDeleteFilter {
  and: [CommentDeleteFilter!]
  content: StringFieldComparison
  id: StringFieldComparison
  or: [CommentDeleteFilter!]
  postId: StringFieldComparison
  title: StringFieldComparison
}

type CommentDeleteResponse {
  content: String
  createdAt: DateTime
  id: String
  postId: String
  title: String
  updatedAt: DateTime
}

type CommentEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Comment"""
  node: Comment!
}

input CommentFilter {
  and: [CommentFilter!]
  content: StringFieldComparison
  id: StringFieldComparison
  or: [CommentFilter!]
  post: CommentFilterPostFilter
  postId: StringFieldComparison
  title: StringFieldComparison
}

input CommentFilterPostFilter {
  and: [CommentFilterPostFilter!]
  authorId: StringFieldComparison
  content: StringFieldComparison
  id: StringFieldComparison
  or: [CommentFilterPostFilter!]
  status: StringFieldComparison
  title: StringFieldComparison
}

type CommentMaxAggregate {
  content: String
  id: String
  postId: String
  title: String
}

type CommentMinAggregate {
  content: String
  id: String
  postId: String
  title: String
}

input CommentSort {
  direction: SortDirection!
  field: CommentSortFields!
  nulls: SortNulls
}

enum CommentSortFields {
  content
  id
  postId
  title
}

input CommentUpdateFilter {
  and: [CommentUpdateFilter!]
  content: StringFieldComparison
  id: StringFieldComparison
  or: [CommentUpdateFilter!]
  postId: StringFieldComparison
  title: StringFieldComparison
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

input CreateAuthor {
  firstName: String
  id: String
  lastName: String
}

input CreateComment {
  content: String
  createdAt: DateTime
  id: String
  postId: String
  title: String
  updatedAt: DateTime
}

input CreateManyAuthorsInput {
  """Array of records to create"""
  authors: [CreateAuthor!]!
}

input CreateManyCommentsInput {
  """Array of records to create"""
  comments: [CreateComment!]!
}

input CreateManyPostsInput {
  """Array of records to create"""
  posts: [CreatePost!]!
}

input CreateOneAuthorInput {
  """The record to create"""
  author: CreateAuthor!
}

input CreateOneCommentInput {
  """The record to create"""
  comment: CreateComment!
}

input CreateOnePostInput {
  """The record to create"""
  post: CreatePost!
}

input CreatePost {
  authorId: String
  content: String
  createdAt: DateTime
  id: String
  status: String
  title: String
  updatedAt: DateTime
}

input CursorPaging {
  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteManyAuthorsInput {
  """Filter to find records to delete"""
  filter: AuthorDeleteFilter!
}

input DeleteManyCommentsInput {
  """Filter to find records to delete"""
  filter: CommentDeleteFilter!
}

input DeleteManyPostsInput {
  """Filter to find records to delete"""
  filter: PostDeleteFilter!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

input DeleteOneInput {
  """The id of the record to delete."""
  id: ID!
}

type Mutation {
  createManyAuthors(input: CreateManyAuthorsInput!): [Author!]!
  createManyComments(input: CreateManyCommentsInput!): [Comment!]!
  createManyPosts(input: CreateManyPostsInput!): [Post!]!
  createOneAuthor(input: CreateOneAuthorInput!): Author!
  createOneComment(input: CreateOneCommentInput!): Comment!
  createOnePost(input: CreateOnePostInput!): Post!
  deleteManyAuthors(input: DeleteManyAuthorsInput!): DeleteManyResponse!
  deleteManyComments(input: DeleteManyCommentsInput!): DeleteManyResponse!
  deleteManyPosts(input: DeleteManyPostsInput!): DeleteManyResponse!
  deleteOneAuthor(input: DeleteOneInput!): AuthorDeleteResponse!
  deleteOneComment(input: DeleteOneInput!): CommentDeleteResponse!
  deleteOnePost(input: DeleteOneInput!): PostDeleteResponse!
  updateManyAuthors(input: UpdateManyAuthorsInput!): UpdateManyResponse!
  updateManyComments(input: UpdateManyCommentsInput!): UpdateManyResponse!
  updateManyPosts(input: UpdateManyPostsInput!): UpdateManyResponse!
  updateOneAuthor(input: UpdateOneAuthorInput!): Author!
  updateOneComment(input: UpdateOneCommentInput!): Comment!
  updateOnePost(input: UpdateOnePostInput!): Post!
}

type PageInfo {
  """The cursor of the last returned record."""
  endCursor: ConnectionCursor

  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor
}

type Post {
  author: Author!
  authorId: String!
  comments(
    """Specify to filter the records returned."""
    filter: CommentFilter = {}

    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to sort results."""
    sorting: [CommentSort!] = []
  ): PostCommentsConnection!
  content: String!
  createdAt: DateTime!
  id: String!
  status: String!
  title: String!
  updatedAt: DateTime!
}

type PostCommentsConnection {
  """Array of edges."""
  edges: [CommentEdge!]!

  """Paging information"""
  pageInfo: PageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type PostConnection {
  """Array of edges."""
  edges: [PostEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

type PostCountAggregate {
  authorId: Int
  content: Int
  id: Int
  status: Int
  title: Int
}

input PostDeleteFilter {
  and: [PostDeleteFilter!]
  authorId: StringFieldComparison
  content: StringFieldComparison
  id: StringFieldComparison
  or: [PostDeleteFilter!]
  status: StringFieldComparison
  title: StringFieldComparison
}

type PostDeleteResponse {
  authorId: String
  content: String
  createdAt: DateTime
  id: String
  status: String
  title: String
  updatedAt: DateTime
}

type PostEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Post"""
  node: Post!
}

input PostFilter {
  and: [PostFilter!]
  author: PostFilterAuthorFilter
  authorId: StringFieldComparison
  comments: PostFilterCommentFilter
  content: StringFieldComparison
  id: StringFieldComparison
  or: [PostFilter!]
  status: StringFieldComparison
  title: StringFieldComparison
}

input PostFilterAuthorFilter {
  and: [PostFilterAuthorFilter!]
  firstName: StringFieldComparison
  id: StringFieldComparison
  lastName: StringFieldComparison
  or: [PostFilterAuthorFilter!]
}

input PostFilterCommentFilter {
  and: [PostFilterCommentFilter!]
  content: StringFieldComparison
  id: StringFieldComparison
  or: [PostFilterCommentFilter!]
  postId: StringFieldComparison
  title: StringFieldComparison
}

type PostMaxAggregate {
  authorId: String
  content: String
  id: String
  status: String
  title: String
}

type PostMinAggregate {
  authorId: String
  content: String
  id: String
  status: String
  title: String
}

input PostSort {
  direction: SortDirection!
  field: PostSortFields!
  nulls: SortNulls
}

enum PostSortFields {
  authorId
  content
  id
  status
  title
}

input PostUpdateFilter {
  and: [PostUpdateFilter!]
  authorId: StringFieldComparison
  content: StringFieldComparison
  id: StringFieldComparison
  or: [PostUpdateFilter!]
  status: StringFieldComparison
  title: StringFieldComparison
}

type Query {
  author(id: ID!): Author
  authors(
    """Specify to filter the records returned."""
    filter: AuthorFilter = {}

    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to sort results."""
    sorting: [AuthorSort!] = []
  ): AuthorConnection!
  comment(id: ID!): Comment
  comments(
    """Specify to filter the records returned."""
    filter: CommentFilter = {}

    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to sort results."""
    sorting: [CommentSort!] = []
  ): CommentConnection!
  post(id: ID!): Post
  posts(
    """Specify to filter the records returned."""
    filter: PostFilter = {}

    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to sort results."""
    sorting: [PostSort!] = []
  ): PostConnection!
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input StringFieldComparison {
  eq: String
  gt: String
  gte: String
  iLike: String
  in: [String!]
  is: Boolean
  isNot: Boolean
  like: String
  lt: String
  lte: String
  neq: String
  notILike: String
  notIn: [String!]
  notLike: String
}

input UpdateAuthor {
  firstName: String
  id: String
  lastName: String
}

input UpdateComment {
  content: String
  createdAt: DateTime
  id: String
  postId: String
  title: String
  updatedAt: DateTime
}

input UpdateManyAuthorsInput {
  """Filter used to find fields to update"""
  filter: AuthorUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateAuthor!
}

input UpdateManyCommentsInput {
  """Filter used to find fields to update"""
  filter: CommentUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateComment!
}

input UpdateManyPostsInput {
  """Filter used to find fields to update"""
  filter: PostUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePost!
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

input UpdateOneAuthorInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateAuthor!
}

input UpdateOneCommentInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateComment!
}

input UpdateOnePostInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePost!
}

input UpdatePost {
  authorId: String
  content: String
  createdAt: DateTime
  id: String
  status: String
  title: String
  updatedAt: DateTime
}

# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""Cursor for paging through collections"""
scalar ConnectionCursor

input CreateOnePostInput {
  """The record to create"""
  post: CreatePost!
}

input CreatePost {
  content: String
  createdAt: DateTime
  id: String
  mainImageUrl: String
  readingTime: Float
  status: String
  tags: [String!]
  title: String
  updatedAt: DateTime
}

input CursorPaging {
  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

input DateFieldComparison {
  between: DateFieldComparisonBetween
  eq: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  is: Boolean
  isNot: Boolean
  lt: DateTime
  lte: DateTime
  neq: DateTime
  notBetween: DateFieldComparisonBetween
  notIn: [DateTime!]
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteOneInput {
  """The id of the record to delete."""
  id: ID!
}

type Mutation {
  createOnePost(input: CreateOnePostInput!): Post!
  deleteOnePost(input: DeleteOneInput!): PostDeleteResponse!
  updateOnePost(input: UpdateOnePostInput!): Post!
}

type PageInfo {
  """The cursor of the last returned record."""
  endCursor: ConnectionCursor

  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor
}

type Post {
  content: String!
  createdAt: DateTime!
  id: String!
  mainImageUrl: String
  readingTime: Float
  status: String!
  tags: [String]
  title: String!
  updatedAt: DateTime!
}

type PostConnection {
  """Array of edges."""
  edges: [PostEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

type PostCountAggregate {
  content: Int
  createdAt: Int
  id: Int
  status: Int
  title: Int
}

type PostDeleteResponse {
  content: String
  createdAt: DateTime
  id: String
  mainImageUrl: String
  readingTime: Float
  status: String
  tags: [String!]
  title: String
  updatedAt: DateTime
}

type PostEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Post"""
  node: Post!
}

input PostFilter {
  and: [PostFilter!]
  content: StringFieldComparison
  createdAt: DateFieldComparison
  id: StringFieldComparison
  or: [PostFilter!]
  status: StringFieldComparison
  title: StringFieldComparison
}

type PostMaxAggregate {
  content: String
  createdAt: DateTime
  id: String
  status: String
  title: String
}

type PostMinAggregate {
  content: String
  createdAt: DateTime
  id: String
  status: String
  title: String
}

input PostSort {
  direction: SortDirection!
  field: PostSortFields!
  nulls: SortNulls
}

enum PostSortFields {
  content
  createdAt
  id
  status
  title
}

type Query {
  post(id: ID!): Post
  posts(
    """Specify to filter the records returned."""
    filter: PostFilter = {}

    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to sort results."""
    sorting: [PostSort!] = [{direction: DESC, field: createdAt}]
  ): PostConnection!
  truncatedPosts(
    """Specify to filter the records returned."""
    filter: PostFilter = {}

    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to sort results."""
    sorting: [PostSort!] = []
  ): PostConnection!
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input StringFieldComparison {
  eq: String
  gt: String
  gte: String
  iLike: String
  in: [String!]
  is: Boolean
  isNot: Boolean
  like: String
  lt: String
  lte: String
  neq: String
  notILike: String
  notIn: [String!]
  notLike: String
}

input UpdateOnePostInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePost!
}

input UpdatePost {
  content: String
  createdAt: DateTime
  id: String
  mainImageUrl: String
  readingTime: Float
  status: String
  tags: [String!]
  title: String
  updatedAt: DateTime
}
